# 🧠 AgencyStack Workspace Rules & Alpha Integration Constitution

This ruleset governs all agent and AI activity inside this workspace. It applies to **Claude**, **Windsurf**, and any tool generating, editing, or validating files in the `agency-stack` repository.

---

## 🏗️ Stack Identity

1. 🏛️ **Stack Name**: `AgencyStack`
2. 🛠️ **Type**: Multi-tenant, hardenable, local-first DevOps toolkit
3. 🔄 **Design Philosophy**:
   - 🧩 Modular
   - 🔐 Sovereign
   - 🌐 Airgappable
   - 🤖 Agent-operable

---

## ⚙️ Installation System

4. 📜 Each installable component must be managed by:
   - A **Bash installer script** in `/scripts/components/install_<component>.sh`
   - A full suite of `make` targets:
     - `make <component>` — install
     - `make <component>-status` — check
     - `make <component>-logs` — tail logs
     - `make <component>-restart` — restart
     - *(Optional)*: `make <component>-test`
5. 🧠 Use `scripts/utils/*.sh` utilities instead of duplicating logic.
5.1: Use `scripts/utils/setup_component_directories.sh` to create component directories and placeholders.
5.2: Use `scripts/utils/alpha_check.sh` to validate components.
5.3: Use `scripts/utils/validate_component.sh` to validate components.
5.4: Do not offer to execute, run, install, or otherwise invoke the make files or anything in this install script. I will do that myself.
5.5: Do not offer to execute, run, install, or otherwise invoke the make files or anything in this install script. I will do that myself.
5.6: Do not offer to execute, run, install, or otherwise invoke the make files or anything in this install script. I will do that myself.

---

## 📁 File and Directory Rules

6. 📂 All component code, scripts, and config must live in:
   - `/scripts/components/`
   - `/scripts/mock/`
   - `/scripts/utils/`
   
   - `/docs/pages/components/`
   - `/opt/agency_stack/...` # for live install content
   - `/var/log/agency_stack/...` # for install and runtime logs


7. 🚫 Do not use `/usr`, `/etc`, `$HOME`, or other system paths.
8. 🔁 All scripts and Makefile commands must be **idempotent**.

---

## 🔒 Security & Sovereignty Rules

9. 🛡️ All services must:
   - Log to `/var/log/agency_stack/components/<component>.log`
   - Use `/opt/agency_stack/clients/${CLIENT_ID}/` for config
   - Avoid cloud APIs unless explicitly enabled (e.g. `--enable-openai`)
   - Avoid centralized auth unless using **self-hosted Keycloak**

10. 📦 All Docker-based installs must:
   - Use `agency_stack_default` network
   - Include resource limits
   - Support isolated restarts

   
---

## 📈 Monitoring & Ports

11. 🌐 If a component exposes a port:
   - Declare in `component_registry.json`
   - Document in `/docs/pages/ports.md`

12. 📊 If the component supports metrics:
   - Add a `/metrics` endpoint
   - Ensure Prometheus compatibility

---

## 🧪 Testing & Mock Mode

13. 🔁 Mock support is required for all AI or API-integrated components:
   - Add mock handler in `/scripts/mock/`
   - Include `make <component>-mock` if appropriate

14. ✅ Validation commands:
   - `make <component>-status`
   - `make alpha-check`
   - `make ui-alpha-check`
   - `make ai-alpha-check`

---

## 📖 Documentation

15. 📚 Required for every component:
   - `/docs/pages/components/<component>.md` (overview, install, config, ports, restart, logs, security)
   - Add entry in:
     - `/docs/pages/components.md` index
     - `/docs/pages/ports.md` if applicable
16. 📝 Follow alpha milestone formatting (simple English, CLI-focused).
17. 🖇️ Only auto-generate docs via `make docs-index` or `make ui-panel-docs`

---

## 📊 Alpha Checklist Integration

18. All new or updated components must:
   - Be in `component_registry.json` with flags:
     ```json
     {
       "installed": true,
       "makefile": true,
       "docs": true,
       "hardened": true,
       "monitoring": true,
       "multi_tenant": true,
       "sso": false
     }
     ```
   - Pass `make alpha-check`
   - Be testable in mock mode (if AI/LLM enabled)

---

## 🧠 Agent & AI Collaboration Rules

19. 🤖 Claude, agents, and Windsurf IDE:
   - May reference and use `scripts/utils/*.sh` for introspection, registry reading, validation
   - Should **never duplicate code** that exists in utilities
   - Must preserve DevOps formatting, naming, and structure

20. 💾 Local workflows should prefer:
   - Makefile → Bash → Utility Scripts → Docs
   - Avoid running `install-all` unless validated first

---

## 💡 Example Use Case

To install, validate, and test `ghost`:

```bash
make prep-dirs
make env-check
make ghost
make ghost-status
make ghost-logs
make ghost-restart
make alpha-check

🧪 For mock testing:

make ghost-mock
open http://localhost:PORT/?mock=true&client_id=test

📦 Included Components (Alpha Scope)
Core	UI	AI
traefik	ai_dashboard	ollama
portainer	control_panel	langchain
droneci	component_ui	agent_orchestrator
wordpress	cli-to-gui-map	resource_watcher
focalboard	registry_viewer	agent_tools_bridge
seafile	dashboard_filters	vector_db (multi-engine)
peertube	logs_ui	
ghost	metrics_ui	
cryptosync	builderio	
elasticsearch	docs_registry	
etcd	ports_index	

✅ Alpha Completion Criteria
All components must:

Be installable via make

Log, restart, and validate

Be discoverable in the dashboard

Be documented and introspectable

Follow security conventions

Be sovereign and offline-ready

🔐 Your mission is to preserve sovereignty, reproducibility, and ease of automation while creating tools that can scale from one sovereign user to many sovereign organizations.