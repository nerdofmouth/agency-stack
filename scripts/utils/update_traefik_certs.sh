#!/bin/bash
# update_traefik_certs.sh - Update Traefik SSL certificate configuration
# Part of the AgencyStack Alpha Phase
#
# This script updates the Traefik configuration to ensure proper Let's Encrypt
# certificate issuance for AgencyStack components.

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/common.sh"

# Default values
CLIENT_ID="${CLIENT_ID:-default}"
DOMAIN="${DOMAIN:-proto001.alpha.nerdofmouth.com}"
ADMIN_EMAIL="${ADMIN_EMAIL:-admin@proto001.alpha.nerdofmouth.com}"
FORCE=false
RESTART_TRAEFIK=true

# Show help
show_help() {
  echo "Usage: $0 [OPTIONS]"
  echo "Update Traefik SSL certificate configuration"
  echo ""
  echo "Options:"
  echo "  --domain DOMAIN         Base domain for the AgencyStack deployment"
  echo "  --admin-email EMAIL     Email for Let's Encrypt notifications"
  echo "  --client-id ID          Client ID (default: default)"
  echo "  --force                 Force configuration update"
  echo "  --no-restart            Don't restart Traefik after configuration update"
  echo "  --help                  Show this help message"
  echo ""
  echo "Example:"
  echo "  $0 --domain proto001.alpha.nerdofmouth.com --admin-email admin@example.com"
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --domain)
      DOMAIN="$2"
      shift 2
      ;;
    --admin-email)
      ADMIN_EMAIL="$2"
      shift 2
      ;;
    --client-id)
      CLIENT_ID="$2"
      shift 2
      ;;
    --force)
      FORCE=true
      shift
      ;;
    --no-restart)
      RESTART_TRAEFIK=false
      shift
      ;;
    --help)
      show_help
      exit 0
      ;;
    *)
      echo "Unknown option: $key"
      show_help
      exit 1
      ;;
  esac
done

# Validate inputs
if [ -z "$DOMAIN" ]; then
  log_error "Domain is required"
  exit 1
fi

if [ -z "$ADMIN_EMAIL" ]; then
  log_error "Admin email is required for Let's Encrypt"
  exit 1
fi

# Define paths
TRAEFIK_DIR="/opt/agency_stack/clients/${CLIENT_ID}/traefik"
CONFIG_DIR="${TRAEFIK_DIR}/config"
ACME_DIR="${TRAEFIK_DIR}/data/acme"

# Check if Traefik is installed
if [ ! -d "$TRAEFIK_DIR" ]; then
  log_error "Traefik installation not found at ${TRAEFIK_DIR}"
  exit 1
fi

# Backup current configuration
log_info "Backing up current Traefik configuration"
backup_timestamp=$(date +%Y%m%d%H%M%S)
cp "${CONFIG_DIR}/traefik.yml" "${CONFIG_DIR}/traefik.yml.bak.${backup_timestamp}" || true

# Update the Traefik configuration for Let's Encrypt
log_info "Updating Traefik configuration for Let's Encrypt"
cat > "${CONFIG_DIR}/traefik.yml" <<EOL
# Traefik configuration for AgencyStack
# Auto-generated by update_traefik_certs.sh

global:
  checkNewVersion: false
  sendAnonymousUsage: false

log:
  level: INFO
  filePath: /etc/traefik/logs/traefik.log

api:
  dashboard: true
  insecure: false

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
    network: "agency_stack"
  file:
    directory: /etc/traefik/dynamic
    watch: true

entryPoints:
  web:
    address: ":80"
    http:

  websecure:
    address: ":443"
    http:
      tls:
        certResolver: myresolver

certificatesResolvers:
  myresolver:
    acme:
      email: "${ADMIN_EMAIL}"
      storage: /etc/traefik/acme/acme.json
      caServer: "https://acme-v02.api.letsencrypt.org/directory"
      httpChallenge:
        entryPoint: web
EOL

# Create TLS configurations for our domains
log_info "Creating TLS configurations for domains"
mkdir -p "${CONFIG_DIR}/dynamic"

cat > "${CONFIG_DIR}/dynamic/tls.yml" <<EOL
tls:
  options:
    default:
      minVersion: VersionTLS12
      sniStrict: true
      cipherSuites:
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305

  certificates:
    - certFile: /etc/traefik/certificates/local-cert.pem
      keyFile: /etc/traefik/certificates/local-key.pem
EOL

# Update the domains configuration file
log_info "Updating domain configuration"
cat > "${CONFIG_DIR}/dynamic/domains.yml" <<EOL
http:
  routers:
    wordpress:
      rule: "Host(\`wordpress.${DOMAIN}\`)"
      entrypoints:
        - websecure
      service: wordpress
      tls:
        certResolver: myresolver
    
    keycloak:
      rule: "Host(\`keycloak.${DOMAIN}\`)"
      entrypoints:
        - websecure
      service: keycloak
      tls:
        certResolver: myresolver
    
    dashboard:
      rule: "Host(\`${DOMAIN}\`) && (PathPrefix(\`/api\`) || PathPrefix(\`/dashboard\`))"
      service: api@internal
      entrypoints:
        - websecure
      middlewares:
        - auth
      tls:
        certResolver: myresolver

  middlewares:
    auth:
      basicAuth:
        users:
          - "admin:$2y$12$Hv3CiWIGVHGy8aUUxF1jHu7MmXnhkjf61f9X.t9iZXJ5QCHAjyumu"  # admin:adminpassword
EOL

# Reset ACME file to force certificate regeneration if needed
if [ "$FORCE" = true ]; then
  log_warning "Force flag set, resetting ACME configuration"
  mkdir -p "$ACME_DIR"
  echo "{}" > "${ACME_DIR}/acme.json"
  chmod 600 "${ACME_DIR}/acme.json"
fi

# Restart Traefik if requested
if [ "$RESTART_TRAEFIK" = true ]; then
  log_info "Restarting Traefik to apply new configuration"
  docker restart traefik_default
fi

log_success "Traefik certificate configuration updated successfully"
echo ""
echo "Let's Encrypt will now issue certificates for the following domains:"
echo "- wordpress.${DOMAIN}"
echo "- keycloak.${DOMAIN}"
echo "- ${DOMAIN} (Traefik dashboard)"
echo ""
echo "Certificate status will be available in /opt/agency_stack/clients/${CLIENT_ID}/traefik/data/acme/acme.json"
echo "Please allow a few minutes for Let's Encrypt to issue the certificates."
exit 0
