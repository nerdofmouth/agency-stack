#!/bin/bash

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "${SCRIPT_DIR}/../utils/common.sh" ]]; then
  source "${SCRIPT_DIR}/../utils/common.sh"
fi

# Enforce containerization (prevent host contamination)
exit_with_warning_if_host

# AgencyStack Component Installer: peacefestivalusa-wordpress-custom-entrypoint.sh
# Path: /scripts/components/peacefestivalusa-wordpress-custom-entrypoint.sh
#

# Enforce containerization (prevent host contamination)

# AgencyStack WordPress Custom Entrypoint
# This script properly configures WordPress for Docker-in-Docker environments
# Following the AgencyStack Charter v1.0.3 principles

# Log start with timestamp for audit trail
echo "[$(date)] Starting AgencyStack WordPress custom entrypoint"
echo "[$(date)] Configuring WordPress for Peace Festival USA (localhost:8082)"

# Function to log messages with timestamps
log_message() {
  echo "[$(date)] $1"
}

# Wait for database to be ready with proper error handling
log_message "Waiting for database connection..."
DB_READY=false
for i in {1..30}; do
  if mysqladmin ping -h mariadb -u $WORDPRESS_DB_USER -p$WORDPRESS_DB_PASSWORD --silent; then
    log_message "Database connection established successfully"
    DB_READY=true
    break
  fi
  log_message "Waiting for database connection... attempt $i/30"
  sleep 2
done

if [ "$DB_READY" != "true" ]; then
  log_message "ERROR: Could not connect to database after 30 attempts"
  log_message "Database connection details:"
  log_message "Host: mariadb"
  log_message "User: $WORDPRESS_DB_USER"
  log_message "Database: $WORDPRESS_DB_NAME"
  log_message "This may be a networking issue or database container may not be running"

# Ensure WordPress files exist before proceeding
if [ ! -f /var/www/html/wp-includes/version.php ]; then
  log_message "WordPress core files not found, copying from /usr/src/wordpress/"
  cp -r /usr/src/wordpress/* /var/www/html/
  chown -R www-data:www-data /var/www/html
  log_message "WordPress core files copied successfully"

# Create a custom wp-config.php override with proper database connection
log_message "Creating WordPress configuration override"
cat > /var/www/html/wp-config-agencystack.php << EOF
<?php
/**
 * AgencyStack WordPress Configuration Overrides
 * Generated by AgencyStack entrypoint script
 */

// Force site URLs to use http and the correct port
define('WP_HOME', 'http://localhost:8082');
define('WP_SITEURL', 'http://localhost:8082');

// Disable HTTPS enforcement for admin in local environments
define('FORCE_SSL_ADMIN', false);
define('FORCE_SSL_LOGIN', false);

// Fix direct database connection for Docker networking
define('DB_HOST', 'mariadb');

// Set debugging based on environment (disable in production)
define('WP_DEBUG', false);
define('WP_DEBUG_LOG', false);
define('WP_DEBUG_DISPLAY', false);

// Security enhancements
define('DISALLOW_FILE_EDIT', true);

// Performance optimizations
define('WP_MEMORY_LIMIT', '256M');
EOF

# Create index.php override to load our config first
log_message "Creating custom index loader"
cat > /var/www/html/index-agencystack.php << 'EOF'
<?php
/**
 * AgencyStack WordPress Index Override
 * This ensures our configuration is loaded before WordPress initialization
 */

// First include our custom configuration
if (file_exists(__DIR__ . '/wp-config-agencystack.php')) {
    require_once __DIR__ . '/wp-config-agencystack.php';
}

// Then include the original index.php
require_once __DIR__ . '/index-original.php';
EOF

# Backup the original index.php if needed
if [ -f /var/www/html/index.php ] && [ ! -f /var/www/html/index-original.php ]; then
    log_message "Backing up original index.php"
    cp /var/www/html/index.php /var/www/html/index-original.php
    
    # Replace the original index.php with our override
    cp /var/www/html/index-agencystack.php /var/www/html/index.php
    log_message "Installed custom index.php for proper configuration loading"

# Add SSL overrides to wp-config.php if it exists
if [ -f /var/www/html/wp-config.php ]; then
    log_message "Ensuring SSL settings are properly configured"
    grep -q "FORCE_SSL_ADMIN" /var/www/html/wp-config.php || sed -i "s/define( 'WP_DEBUG'/define('FORCE_SSL_ADMIN', false); define('FORCE_SSL_LOGIN', false); define( 'WP_DEBUG'/g" /var/www/html/wp-config.php

# Create a health check file for monitoring
cat > /var/www/html/agencystack-health.php << 'EOF'
<?php
/**
 * AgencyStack Health Check
 * Used by monitoring systems to verify WordPress is running properly
 */
header('Content-Type: application/json');
$status = array(
  'status' => 'healthy',
  'version' => '1.0',
  'db_connected' => false,
  'time' => date('c')
);

// Check database connection
if (function_exists('mysqli_connect')) {
  try {
    $link = mysqli_connect('mariadb', getenv('WORDPRESS_DB_USER'), getenv('WORDPRESS_DB_PASSWORD'), getenv('WORDPRESS_DB_NAME'));
    if ($link) {
      $status['db_connected'] = true;
      mysqli_close($link);
    }
  } catch (Exception $e) {
    $status['error'] = $e->getMessage();
  }
}

echo json_encode($status);
EOF
chmod 644 /var/www/html/agencystack-health.php

log_message "WordPress configuration complete"
log_message "Running original docker-entrypoint.sh with arguments: $@"

# Run the original WordPress entrypoint
docker-entrypoint.sh "$@"
