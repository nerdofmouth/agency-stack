#!/bin/bash

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "${SCRIPT_DIR}/../utils/common.sh" ]]; then
  source "${SCRIPT_DIR}/../utils/common.sh"
fi

# Enforce containerization (prevent host contamination)
exit_with_warning_if_host

# AgencyStack Component Installer: client-wordpress-entrypoint.sh
# Path: /scripts/components/client-wordpress-entrypoint.sh
#

# Enforce containerization (prevent host contamination)

# AgencyStack WordPress Custom Entrypoint Template
# This script properly configures WordPress for containerized environments
# Following the AgencyStack Charter v1.0.3 principles

# Log start with timestamp for audit trail
echo "[$(date)] Starting AgencyStack WordPress custom entrypoint"
echo "[$(date)] Configuring WordPress for client environment"

# Function to log messages with timestamps
log_message() {
  echo "[$(date)] $1"
}

# Enhanced database connection check
log_message "Starting database connectivity checks..."

# Install networking tools if needed for diagnostics
if ! command -v netcat &> /dev/null && command -v apt-get &> /dev/null; then
  log_message "Installing diagnostic tools..."
  apt-get update && apt-get install -y netcat-openbsd iputils-ping dnsutils 2>/dev/null || true

# DNS resolution check
log_message "Checking DNS resolution for ${WORDPRESS_DB_HOST}..."
if command -v dig &> /dev/null; then
  dig ${WORDPRESS_DB_HOST} || log_message "DNS lookup failed"

# Network connectivity check (use native tools if available)
log_message "Checking network connectivity to database..."
if command -v nc &> /dev/null; then
  nc -zv ${WORDPRESS_DB_HOST} 3306 -w 1 && log_message " Port 3306 is reachable" || log_message " Cannot reach port 3306"

# Wait for database to be ready with proper error handling
log_message "Waiting for database connection..."
DB_READY=false
for i in {1..60}; do
  if mysqladmin ping -h "${WORDPRESS_DB_HOST}" -u "${WORDPRESS_DB_USER}" -p"${WORDPRESS_DB_PASSWORD}" --silent 2>/dev/null; then
    log_message " Database connection established successfully on attempt $i"
    DB_READY=true
    break
  fi
  log_message "Waiting for database connection... attempt $i/60"
  sleep 3
done

if [ "$DB_READY" != "true" ]; then
  log_message "ERROR: Could not connect to database after 60 attempts"
  log_message "Database connection details:"
  log_message "Host: ${WORDPRESS_DB_HOST}"
  log_message "User: ${WORDPRESS_DB_USER}"
  log_message "Database: ${WORDPRESS_DB_NAME}"
  log_message "This may be a networking issue or database container may not be running"
  
  # Attempt a more verbose connection to assist with debugging
  log_message "Attempting explicit mysql connection for diagnostics..."
  mysql -h "${WORDPRESS_DB_HOST}" -u "${WORDPRESS_DB_USER}" -p"${WORDPRESS_DB_PASSWORD}" -e "SELECT 'Database connection test';" 2>&1 || log_message "MySQL command failed"

# Ensure WordPress files exist before proceeding
if [ ! -f /var/www/html/wp-includes/version.php ]; then
  log_message "WordPress core files not found, copying from /usr/src/wordpress/"
  cp -r /usr/src/wordpress/* /var/www/html/
  chown -R www-data:www-data /var/www/html
  log_message "WordPress core files copied successfully"

# Check for WP config overrides in volume mount
if [ -f "/tmp/wp-config-agency.php" ]; then
  log_message "Found custom wp-config-agency.php, copying to WordPress directory"
  cp "/tmp/wp-config-agency.php" "/var/www/html/wp-config-agency.php"
  chown www-data:www-data "/var/www/html/wp-config-agency.php"

# Create a custom wp-config.php override with proper database connection
log_message "Creating WordPress configuration override"
cat > /var/www/html/wp-config-agencystack.php << EOF
<?php
/**
 * AgencyStack WordPress Configuration Overrides
 * Generated by AgencyStack entrypoint script
 */

// Database connection - use environment variables
define('DB_HOST', '${WORDPRESS_DB_HOST}');
define('DB_NAME', '${WORDPRESS_DB_NAME}');
define('DB_USER', '${WORDPRESS_DB_USER}');
define('DB_PASSWORD', '${WORDPRESS_DB_PASSWORD}');

// URL Configuration
if (isset(\$_SERVER['HTTP_X_FORWARDED_PROTO']) && \$_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
    // Handle reverse proxy SSL
    \$_SERVER['HTTPS'] = 'on';
} 

// Site URL settings based on environment variables
if (getenv('WP_HOME')) {
    define('WP_HOME', getenv('WP_HOME'));
    define('WP_SITEURL', getenv('WP_SITEURL'));
} else {
    // Fallback to auto-detection
    define('WP_HOME', (isset(\$_SERVER['HTTPS']) && \$_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://') . \$_SERVER['HTTP_HOST']);
    define('WP_SITEURL', (isset(\$_SERVER['HTTPS']) && \$_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://') . \$_SERVER['HTTP_HOST']);
}

// Admin SSL configuration
define('FORCE_SSL_ADMIN', false);
define('FORCE_SSL_LOGIN', false);

// Set debugging based on environment variable
define('WP_DEBUG', getenv('WORDPRESS_DEBUG') === 'true');
define('WP_DEBUG_LOG', getenv('WORDPRESS_DEBUG') === 'true');
define('WP_DEBUG_DISPLAY', false);

// Security enhancements
define('DISALLOW_FILE_EDIT', true);
define('AUTOMATIC_UPDATER_DISABLED', true);

// Performance optimizations
define('WP_MEMORY_LIMIT', '256M');

// Multi-tenant support
define('MULTISITE', false);

// AgencyStack integration
define('AGENCY_STACK_VERSION', '1.0.3');
define('AGENCY_CLIENT_ID', getenv('WORDPRESS_CLIENT_ID'));
EOF

# Create index.php override to load our config first
log_message "Creating custom index loader"
if [ -f /var/www/html/index.php ]; then
  # Backup original index.php
  cp /var/www/html/index.php /var/www/html/index.php.original
  
  # Create custom index that loads our config first
  cat > /var/www/html/index.php << EOF
<?php
/**
 * AgencyStack WordPress Index Override
 * Loads custom configuration before WordPress core
 */

// Load AgencyStack configuration first
if (file_exists(__DIR__ . '/wp-config-agencystack.php')) {
    require_once __DIR__ . '/wp-config-agencystack.php';
}

// Load custom agency configuration if exists
if (file_exists(__DIR__ . '/wp-config-agency.php')) {
    require_once __DIR__ . '/wp-config-agency.php';
}

// Load original index
require_once __DIR__ . '/index.php.original';
EOF
  log_message "Custom index loader created"
  log_message "WARNING: WordPress index.php not found, skipping custom loader"

# Create WordPress health check endpoint
log_message "Creating WordPress health check endpoint"
mkdir -p /var/www/html/agency-health
cat > /var/www/html/agency-health/index.php << EOF
<?php
/**
 * AgencyStack WordPress Health Check
 * Provides status information for monitoring
 */

// Basic health status
\$status = array(
    'status' => 'healthy',
    'timestamp' => date('c'),
    'client_id' => getenv('WORDPRESS_CLIENT_ID'),
    'version' => getenv('AGENCY_STACK_VERSION') ?: '1.0.3',
    'environment' => array(
        'php_version' => phpversion(),
        'server' => \$_SERVER['SERVER_SOFTWARE'],
        'database_host' => defined('DB_HOST') ? DB_HOST : getenv('WORDPRESS_DB_HOST')
    )
);

// Check database connectivity
\$db_connected = false;
try {
    \$mysqli = new mysqli(
        defined('DB_HOST') ? DB_HOST : getenv('WORDPRESS_DB_HOST'),
        defined('DB_USER') ? DB_USER : getenv('WORDPRESS_DB_USER'),
        defined('DB_PASSWORD') ? DB_PASSWORD : getenv('WORDPRESS_DB_PASSWORD'),
        defined('DB_NAME') ? DB_NAME : getenv('WORDPRESS_DB_NAME')
    );
    
    if (!\$mysqli->connect_error) {
        \$db_connected = true;
        \$status['database'] = array(
            'connected' => true,
            'version' => \$mysqli->server_info
        );
        \$mysqli->close();
    } else {
        \$status['database'] = array(
            'connected' => false,
            'error' => \$mysqli->connect_error
        );
        \$status['status'] = 'unhealthy';
    }
} catch (Exception \$e) {
    \$status['database'] = array(
        'connected' => false,
        'error' => \$e->getMessage()
    );
    \$status['status'] = 'unhealthy';
}

// Return results as JSON
header('Content-Type: application/json');
echo json_encode(\$status, JSON_PRETTY_PRINT);
EOF

log_message "Custom entrypoint configuration complete"

# Execute the command passed to the entrypoint
log_message "Starting WordPress with command: $@"
exec "$@"
