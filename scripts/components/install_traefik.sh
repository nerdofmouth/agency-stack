#!/bin/bash
# install_traefik.sh - Installation script for traefik
#
# This script installs and configures traefik for AgencyStack
# following the component installation conventions.
#
# Author: AgencyStack Team
# Date: 2025-04-07

set -e

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../utils/common.sh"
source "${SCRIPT_DIR}/../utils/log_helpers.sh"

# Default configuration
CLIENT_ID="${CLIENT_ID:-default}"
DOMAIN="${DOMAIN:-localhost}"
ADMIN_EMAIL="${ADMIN_EMAIL:-admin@example.com}"

# Paths
INSTALL_DIR="/opt/agency_stack/clients/${CLIENT_ID}/traefik"
CONFIG_DIR="${INSTALL_DIR}/config"
DATA_DIR="${INSTALL_DIR}/data"
LOG_DIR="/var/log/agency_stack/components"
LOG_FILE="${LOG_DIR}/traefik.log"
DOCKER_COMPOSE_FILE="${INSTALL_DIR}/docker-compose.yml"
TRAEFIK_NETWORK_NAME="${CLIENT_ID}_network"

# Parse command-line arguments
FORCE=false
WITH_DEPS=false
VERBOSE=false
DRY_RUN=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --domain)
      DOMAIN="$2"
      shift 2
      ;;
    --admin-email)
      ADMIN_EMAIL="$2"
      shift 2
      ;;
    --client-id)
      CLIENT_ID="$2"
      shift 2
      ;;
    --force)
      FORCE=true
      shift
      ;;
    --with-deps)
      WITH_DEPS=true
      shift
      ;;
    --verbose)
      VERBOSE=true
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    *)
      log_error "Unknown argument: $1"
      exit 1
      ;;
  esac
done

log_info "Starting traefik installation..."

# Ensure directories exist
log_cmd "Creating installation directories..."
mkdir -p "${INSTALL_DIR}"
mkdir -p "${CONFIG_DIR}"
mkdir -p "${DATA_DIR}"
mkdir -p "${LOG_DIR}"

# Create Docker network if it doesn't exist
log_cmd "Creating Docker network ${TRAEFIK_NETWORK_NAME}..."
if ! docker network inspect "${TRAEFIK_NETWORK_NAME}" &>/dev/null; then
  docker network create "${TRAEFIK_NETWORK_NAME}" || {
    log_error "Failed to create Docker network: ${TRAEFIK_NETWORK_NAME}"
    exit 1
  }
  log_success "Created Docker network: ${TRAEFIK_NETWORK_NAME}"
else
  log_info "Docker network ${TRAEFIK_NETWORK_NAME} already exists"
fi

# Create Traefik configuration files
log_cmd "Creating Traefik configuration files..."

# Create traefik.yml config file
cat > "${CONFIG_DIR}/traefik.yml" <<EOF
# Traefik configuration for AgencyStack
# Auto-generated by install_traefik.sh

global:
  checkNewVersion: false
  sendAnonymousUsage: false

log:
  level: INFO
  filePath: /etc/traefik/logs/traefik.log

api:
  dashboard: true
  insecure: false

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
    network: "${TRAEFIK_NETWORK_NAME}"
  file:
    directory: /etc/traefik/dynamic
    watch: true

entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https
  websecure:
    address: ":443"
    http:
      tls:
        certResolver: letsencrypt

certificatesResolvers:
  letsencrypt:
    acme:
      email: "${ADMIN_EMAIL}"
      storage: /etc/traefik/acme/acme.json
      httpChallenge:
        entryPoint: web
EOF

# Create dynamic configuration for dashboard
mkdir -p "${CONFIG_DIR}/dynamic"
cat > "${CONFIG_DIR}/dynamic/dashboard.yml" <<EOF
# Dynamic configuration for Traefik dashboard
http:
  routers:
    dashboard:
      rule: "Host(\`traefik.${DOMAIN}\`)"
      service: api@internal
      middlewares:
        - auth
      tls:
        certResolver: letsencrypt
  middlewares:
    auth:
      basicAuth:
        users:
          - "admin:$(htpasswd -nb -B admin adminpassword | sed -e s/\\$/\\$\\$/g)"
EOF

# Create acme directory for Let's Encrypt certificates
mkdir -p "${CONFIG_DIR}/acme"
touch "${CONFIG_DIR}/acme/acme.json"
chmod 600 "${CONFIG_DIR}/acme/acme.json"

# Create logs directory
mkdir -p "${CONFIG_DIR}/logs"
touch "${CONFIG_DIR}/logs/traefik.log"
chmod 644 "${CONFIG_DIR}/logs/traefik.log"

# Create docker-compose.yml
log_cmd "Creating Traefik docker-compose.yml..."
cat > "${DOCKER_COMPOSE_FILE}" <<EOF
version: '3'

services:
  traefik:
    image: traefik:v2.9
    container_name: traefik_${CLIENT_ID}
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_DIR}/traefik.yml:/etc/traefik/traefik.yml:ro
      - ${CONFIG_DIR}/dynamic:/etc/traefik/dynamic:ro
      - ${CONFIG_DIR}/acme:/etc/traefik/acme
      - ${CONFIG_DIR}/logs:/etc/traefik/logs
    networks:
      - ${TRAEFIK_NETWORK_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(\`traefik.${DOMAIN}\`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$2y$$05$$bUD0xeKCLfZdzrXnCOzYLevsGz0pH8q9GrOjvK5.P4S566g/IhCuS"

networks:
  ${TRAEFIK_NETWORK_NAME}:
    external: true
EOF

# Start Traefik
if [ "$DRY_RUN" = false ]; then
  log_cmd "Starting Traefik..."
  cd "${INSTALL_DIR}" || exit 1
  docker-compose up -d || {
    log_error "Failed to start Traefik"
    exit 1
  }
  
  # Verify Traefik is running
  if docker ps | grep -q "traefik_${CLIENT_ID}"; then
    log_success "Traefik is running"
  else
    log_error "Failed to start Traefik container"
    exit 1
  fi
  
  # Create installation marker
  touch "${INSTALL_DIR}/.installed_ok"
else
  log_info "Dry run mode: Skipping Traefik startup"
fi

log_success "traefik installation completed successfully!"
